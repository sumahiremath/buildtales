[
  
    {
      "title": "When a Supposedly Quarter-Long Project Became My Real EM Baptism",
      "url": "/engineering/leadership/management/systems/2025/08/18/quarter-long-project-em-baptism.html",
      "date": "August 18, 2025",
      "categories": ["engineering","leadership","management","systems"],
      "tags": ["engineering-management","project-management","leadership","team-building","technical-decision-making"],
      "excerpt": "Sometimes the projects that look simple on paper become the most transformative experiences. Here's how what was supposed to be a straightforward quarter-long initiative became my real introduction to engineering...",
      "content": "When a Supposedly Quarter-Long Project Became My Real EM Baptism\n\nPublished on: August 18, 2025\n\n\n\nEvery engineering manager (EM) remembers their first big project. For me, it was integrating a third-party service provider with a client’s bank.\n\nOn paper, it looked like a simple quarter-long integration: gather requirements, build the flows, test, launch. Clean. Predictable. Neat.\n\n\n  Reality had other plans. (Spoiler: the universe laughs at clean Gantt charts.)\n\n\nThe project stretched across multiple quarters, wound through pauses and reversals, and tested every ounce of planning, adaptability, and persistence I had as a new EM. By the end, it launched flawlessly — but it became my true baptism into engineering management.\n\nPlanning Before Dates\n\nI didn’t start with timelines. I started by making sure I understood every piece of the system — how money moved, what reports were generated, where reconciliation lived, even what a consumer would see on their bank statement per NACHA rules.\n\nOnly after I could see it clearly myself did I set out to create shared understanding. I turned those flows into Miro diagrams that became the universal reference point — something engineers, support, compliance, and even the client’s bank could all point to.\n\nThat shared map turned arguments into alignment. We weren’t debating opinions anymore; we were debating the same picture.\n\nOnly once we had that did I even think about dates.\n\n\n  (Spoiler: dates lie. Flows don’t.)\n\n\nThe Spreadsheet That Made Slippage Visible\n\nNext came the spreadsheet: sprint by sprint deliverables, dependencies, and release timing.\n\nIt wasn’t just backlog grooming. It was slippage radar. If something slipped in Sprint 3, it screamed at us in Sprint 4 — not buried until the end.\n\nI also knew Nov/Dec freezes were coming. Translation: no one’s pushing code when half the company is in ski chalets or watching Hallmark movies. So I front-loaded heavy releases and left December lean.\n\nIt was proactive, not reactive. Also: mildly soul-saving.\n\nChaos in the Middle\n\nNo project manager until the last mile. Forty-five days before launch, we finally got a project manager — brand-new to the company, brand-new to ACH, and dropped straight into the fire. The mythical man month is real: adding people late slows you down before it speeds you up. I spent as much time onboarding as delivering.\n\nA new product manager, too. A few months before development even started, a new product manager had joined the company. They were new to both our product and ACH. Which meant in parallel with everything else, I was running crash courses in SEC codes, NACHA returns, and reconciliation flows so product decisions could be made with confidence.\n\nTech debt first. Two sprints went to architecture cleanup. No demos, no visible progress. Telling stakeholders, “Trust me, we’re deleting old code” went about as well as you’d expect.\n\nClient pause + restart. Midstream, the client paused. Months later, they restarted with new requirements. Documentation saved us — otherwise we’d still be arguing about what we were building.\n\nCurveballs\n\nReporting flip. For months: “No reporting changes.” Then in November: “Actually, new reports are required for launch.” Cue the sound of every engineer’s soul leaving their body. I pulled in a dev from another team, handed them a spec so detailed it included the SQL qery and run time, and we shipped… in January, one week before launch.\n\nEnterprise release cycles. I was enlightened to the fact that our sprint board wasn’t the only calendar that mattered. The client’s release schedule was the real boss fight — and some releases only happened on a specific day of the month. Miss it, and you weren’t just a week late, you were a month late. Nothing will give you heartburn quite like realizing a single slip can cascade into thirty days of delay. Sprint velocity is optional; the client’s release train is not.\n\n\n  In enterprise projects, the real deadline isn’t your sprint — it’s the client’s release train. Miss it, and you wait a month to board again.\n\n\nNACHA file validation &amp; observability. Every filename and field at the new bank had to match spec or the file would be rejected. I pushed for dashboards and alerts from the start — because if ACH breaks silently, you don’t find out until your client calls at 7 a.m.\n\nOperationalization: Break Glass if Needed\n\nCode wasn’t enough. We had to prepare for when things went wrong — internally, with the client, and with their bank. I established DLs for communication and mapped escalation paths before we ever hit production.\n\nWe rehearsed fire drills such as:\n\n\n  What if a NACHA file is submitted twice?\n  What if a reversal is required?\n  What if reports were missing?\n  What would be our engineering team SLA for inquiry vs. incident?\n  Who approves changes — at our company, at the client, at the bank?\n\n\nI documented the hierarchy of decisions and “break glass” procedures in Confluence like a Payments Doomsday Prepper. We prayed we’d never need it — but if we did, at least we wouldn’t be inventing policy mid-incident.\n\nAnd because this was a new flow, I also thought through scenarios we hadn’t yet encountered. Planning for the unknown felt paranoid at times — but it was the only way to be extra prepared.\n\n\n  In payments, you don’t just plan for failures you’ve seen — you plan for the ones you haven’t.\n\n\nIntentional Phased Roll Out\n\nWhen code was ready, we didn’t flip the switch overnight.\n\nWe earned trust in increments: a few transactions → 1% → 5% → 20% → 50% → 100%.\n\nIt stretched another quarter, but it made reconciliation boring — which is exactly how you want it.\n\n\n  In payments, boring is a feature. If the cutover feels exciting, you probably did it wrong.\n\n\nManaging the Tail\n\nEven after 100% rollout, the old bank wasn’t done with us. Per NACHA rules, returns, refunds and retries had to flow through the original originator. That meant a 60-day tail of zombie transactions.\n\nTo manage it, I built a Looker report that landed in my inbox weekly. Every Monday it reminded me: “Surprise, you’re still not done.”\n\nBut it also gave me proof for the client that the old pipeline was quietly dying off — no hidden stragglers, no surprises.\n\n\n  In payments, launch isn’t the finish line. The tail can chase you for months.\n\n\nThe ACH Integration Journey\n\nHere’s the journey in one picture — because sometimes a chart tells the story better than paragraphs.\n\nNodes (with cheeky labels):\n\n  Kickoff → “The Quarter-Long Fantasy”\n  Spreadsheet Therapy → “My Slippage Radar”\n  Chaos in the Middle → “New PMs, Who Dis?”\n  Curveballs → “Reporting Flip + Boss Fight Calendar”\n  Operationalization → “Payments Doomsday Prepper”\n  Intentional Rollout → “Boring by Design”\n  Managing the Tail → “Zombie Returns”\n  Seamless Launch → “The Magic Trick”\n\n\n\nflowchart TD\n    A[\"The Quarter-Long Fantasy\"] --&gt; B[\"Spreadsheet Therapy\"]\n    B --&gt; C[\"New PMs, Who Dis?\"]\n    C --&gt; D[\"Reporting Flip + Boss Fight Calendar\"]\n    D --&gt; E[\"Payments Doomsday Prepper\"]\n    E --&gt; F[\"Boring by Design\"]\n    F --&gt; G[\"Zombie Returns\"]\n    G --&gt; H[\"The Magic Trick (Seamless Launch)\"]\n\n    style A fill:#e3f2fd,stroke:#90caf9,stroke-width:2px\n    style B fill:#f3e5f5,stroke:#ce93d8,stroke-width:2px\n    style C fill:#fff3e0,stroke:#ffb74d,stroke-width:2px\n    style D fill:#f3e5f5,stroke:#ba68c8,stroke-width:2px\n    style E fill:#e8f5e9,stroke:#81c784,stroke-width:2px\n    style F fill:#ffebee,stroke:#ef9a9a,stroke-width:2px\n    style G fill:#ffebee,stroke:#ef5350,stroke-width:2px\n    style H fill:#ede7f6,stroke:#9575cd,stroke-width:2px\n\n\n\nThe Outcome\n\nFrom the outside, the launch looked seamless. Clean rollout. Reconciled reports. Stable ops.\n\nFrom the inside, it was chaos with a spreadsheet: a late project manager, a new product manager, the client pause, the reporting flip, the overloaded team, the phased rollout, the zombie tail of returns, the fire drills — none of it was visible.\n\nAnd that was the point.\n\n\n  Great delivery isn’t about showing the chaos. It’s about making sure the chaos never shows.\n\n\nWhat I Learned\n\n\n  Miro diagrams are lies you tell yourself early — but useful lies. People forgive delays; they don’t forgive surprises.\n  Don’t fight holiday freezes or enterprise cycles. Ski season always wins.\n  Pulling in help only works if you hand over a blueprint. Give people complete requirements, not partial context.\n  Earn trust in increments, not big bangs. Phased cutovers are your friend.\n  Old systems die slowly — zombie returns are forever. Legacy systems have long shadows.\n  Compliance and contracts matter as much as code. Technical solutions are only part of the equation.\n  Set expectations when work is invisible. Refactors don’t demo well.\n  Onboarding late hires takes time. The mythical man month doesn’t care about your deadline.\n  Operationalize the “what ifs.” Payments fire drills are weird, but they work.\n\n\nWhat I Might Have Done Differently\n\nLooking back, a few things stand out.\n\n\n  I could have invested earlier in cross-training the product manager on ACH fundamentals instead of drip-feeding knowledge under pressure. That might have accelerated decision-making.\n  I underestimated how much complexity came from the client’s multiple sites and environments, each with their own development, QA, and release cycles. If I had pushed for clearer configurability expectations upfront, it could have reduced later coordination churn.\n  And if I had aligned earlier on the client’s enterprise release calendar, we might have avoided some of the heartburn that came from missing narrow release windows.\n\n\nNone of these gaps derailed us — but recognizing them makes me sharper for the next big program.\n\nClosing\n\nThis wasn’t the clean, quarter-long project I imagined. It was messy, unpredictable, and exhausting.\n\nBut it wasn’t just me. A lean but determined cross-functional team — engineering, QA, support, compliance, client services, project manager, and product managers — made it possible. My manager’s support also helped unblock key decisions and keep things moving when momentum stalled. Together we carried the chaos without ever letting it show.\n\nIt made me an EM. And it taught me that engineering management isn’t about keeping projects on straight tracks. It’s about navigating the curves — and making sure that, when the client looks, all they see is a smooth road.\n\nThat project made me. Every one since has built on it.\n\n\n  In payments and in leadership, the job isn’t to eliminate chaos — it’s to make sure chaos never shows.\n\n\n\n\nEnjoyed this deep dive into engineering management? Check out the main How U.S. Payments Really Work series for more technical deep dives into payment systems.\n"
    },
  
    {
      "title": "ACH Correction Codes: Fix It, Log It, Prove It",
      "url": "/fintech/ach/compliance/2025/08/17/ach-correction-codes-fix-log-prove.html",
      "date": "August 17, 2025",
      "categories": ["fintech","ach","compliance"],
      "tags": ["ach","nacha","noc","correction-codes","compliance","fintech-operations","audit"],
      "excerpt": "When it comes to ACH payments, mistakes happen. Instead of rejecting every transaction, the ACH Network gives us Notification of Change (NOC) codes. I learned the hard way: every NOC...",
      "content": "ACH Correction Codes: Fix It, Log It, Prove It\n\nPublished on: August 17, 2025\n\n\n\nWhen it comes to ACH payments, mistakes happen. An account number is off by a digit, someone had a typo in their name, a routing number is outdated, or someone closed their account last month. Instead of rejecting every transaction outright, the ACH Network gives us Notification of Change (NOC) codes—standardized correction messages that financial institutions send back so originators can fix the data.\n\nEvery NOC is not just a suggestion—it’s a requirement.\n\nWhy This Matters Now\n\nACH correction handling is one of those operational details that seems minor until you’re sitting across from an auditor explaining why the same account keeps generating NOCs month after month. In today’s fintech landscape, where compliance scrutiny is intensifying and operational costs are under the microscope, proper NOC handling isn’t just about following rules—it’s about protecting your business.\n\nIn one of our ACH audits, the auditor went line by line through our correction handling process. The key point drilled in:\n\n\n  Every correction must be updated in your system.\n\n  The corrected data must flow into the very next ACH file you send.\n\n  NACHA rules require that corrections be applied within six banking days of receipt, or before the next entry is originated—whichever comes first.\n\n\nIt’s not enough to glance at the NOC and think, “We’ll fix it later.” ACH rules make it clear—if you don’t update immediately, you’re out of compliance. Worse, you risk rejected payments, customer frustration, and fines.\n\nAnd let’s be honest: the ACH operator notices. If you keep sending uncorrected data, expect them to grumble. Each NOC comes at a price too—literally. Financial institutions charge per correction, and those costs add up quickly. Staying compliant isn’t just about keeping auditors happy—it’s about saving money and maintaining credibility with your partners.\n\nHow It Works: Step by Step\n\nHere’s the process the auditor walked us through:\n\n\n  Receive the NOC: Your ODFI forwards correction codes from the RDFI.\n  Decode the Code: Each code maps to a specific issue (e.g., C01 = incorrect account number, C02 = incorrect routing number).\n  Update the Record: Apply the change to your customer or vendor record inside your system of record.\n  Log the Action: Record when, who, and what was updated.\n  Propagate the Fix: Make sure the corrected data is included in your next outgoing ACH file.\n  Verify: Spot-check your file output to confirm corrections didn’t get skipped.\n\n\nBest Practices That Save Headaches\n\nAuditors, operators, and seasoned practitioners all recommend a few extra guardrails:\n\n\n  Maintain Audit Logs: Track every correction, when it was made, and by whom. This isn’t optional—it’s your defense if questioned.\n  Validate NOC Data Before Applying: Occasionally, corrected data in an NOC is itself wrong. Add error handling to detect bad routing numbers, mismatched names, or impossible account formats before blindly updating records.\n  Automate Updates: Manual fixes increase the risk of human error.\n  Check for Data Differences Before Updating: If you receive both the NACHA file and a webhook event, confirm the data is actually different before applying the update—this prevents overwriting valid information with duplicates.\n  Monitor Repeat Offenders: If the same account keeps producing NOCs, dig deeper—maybe your customer database is out of sync with their bank.\n  Train Your Ops Team: Everyone should know that a correction is not a low-priority task.\n  Think ROI: Every ignored NOC costs you real dollars. Treat compliance as cost control.\n\n\nWhy It Matters\n\nNOCs may feel like administrative noise, but they’re part of the discipline of ACH payments. If you want to run clean files, keep your NACHA audit smooth, and avoid repeat exceptions, treating corrections as a first-class operation is non-negotiable.\n\nIn ACH, the saying holds true: Fix it once, fix it right, and leave a trail proving you did. Otherwise, you’ll pay for the same mistake over and over again—literally.\n\nKey Takeaways\n\n\n  NOCs are mandatory, not suggestions - Every correction must be implemented immediately\n  Audit trails are your defense - Log every change with timestamps and user attribution\n  Corrections flow to the next file - Updated data must appear in your very next ACH submission\n  Costs add up quickly - Each NOC has a price tag, making compliance a cost control measure\n  Operators notice patterns - Repeated NOCs from the same accounts signal deeper issues\n\n\nReferences\n\n\n  NACHA. “ACH Operating Rules &amp; Guidelines.” NACHA, 2024. nacha.org\n  Federal Reserve. “FedACH Services - Notification of Change.” Federal Reserve Financial Services, 2024.\n\n\n\n\nEnjoyed this deep dive? Check out the main How U.S. Payments Really Work series for more payment system mysteries demystified.\n"
    },
  
    {
      "title": "SEC Codes in ACH: Authorization, Compliance, and How to Not Get Burned",
      "url": "/fintech/ach/2025/08/16/sec-codes-authorization-boss-level.html",
      "date": "August 16, 2025",
      "categories": ["fintech","ach"],
      "tags": ["ach","sec-codes","compliance","authorization","nacha"],
      "excerpt": "SEC codes determine your compliance fate in ACH payments. Get them wrong and face chargebacks, fines, and regulatory headaches. This guide shows you how to classify transactions correctly and stay...",
      "content": "SEC Codes in ACH: Authorization, Compliance, and How to Not Get Burned\n\nPublished on: August 16, 2025\n\n\n\nWe once misclassified a whole batch of ACH payments — and our bank noticed immediately. Within days, we had a compliance warning sitting in our inbox and a very clear message: fix your SEC codes, or else.\n\nThat’s when we realized SEC codes aren’t just three-letter labels. They’re legal shorthand for how authorization was obtained — telling every bank in the chain who’s paying whom and what rules apply for disputes.\n\nGet them right, and your payments flow smoothly. Get them wrong, and you invite disputes, audits, and compliance headaches.\n\nThis guide breaks down what SEC codes are, how to classify ACH payments correctly, and how to stay compliant with Nacha and Reg E.\n\n\n\nWhat SEC Codes Actually Do\n\nEvery ACH batch header carries a three-letter SEC code. Example from a payroll file:\n\n5220TECH STARTUP    1234567890PPDPAYROLL    250816   1091000019000001\n\n\nThat PPD isn’t decorative. It signals: “This is a consumer payment with signed authorization.” If you change that to CCD for payroll, you’ve just violated Nacha rules by pretending employees are businesses.\n\nSEC = Standard Entry Class. It encodes two things:\n\n\n  Transaction classification → consumer vs. business, paper vs. digital\n  Authorization methodology → written, online, telephone, implied\n\n\nThink of it as a contract: how you got the “yes.”\n\nThe cost of getting it wrong? Misclassify a consumer payment as business (using CCD instead of PPD), and you’ve just eliminated Regulation E protections. When that customer disputes the transaction, you have no legal defense — and you’ll eat the full chargeback, plus potential fines for violating consumer protection laws.\n\nThe Core SEC Codes You’ll Actually Use\n\n\n  \n    \n      SEC Code\n      When to Use\n      Authorization Method\n      Dispute Risk\n      Example\n    \n  \n  \n    \n      PPD (Prearranged Payment &amp; Deposit)\n      Recurring or single consumer payments\n      Signed authorization (paper/digital)\n      High (60-day Reg E)\n      Payroll, gym memberships\n    \n    \n      CCD (Cash Concentration or Disbursement)\n      B2B payments\n      Corporate agreement\n      Low\n      Vendor settlement\n    \n    \n      WEB (Internet-Initiated Entry)\n      Consumer payments authorized online\n      Online form + Nacha account validation\n      High fraud risk, 60-day window\n      Subscriptions, e-commerce\n    \n    \n      TEL (Telephone-Initiated Entry)\n      Consumer authorization by phone\n      Recorded authorization OR written confirmation to customer\n      High\n      Call center bill pay\n    \n    \n      ARC (Accounts Receivable Conversion)\n      Mailed-in check converted to ACH\n      Implied via check submission\n      Moderate\n      Insurance premiums\n    \n    \n      POP (Point-of-Purchase Conversion)\n      Paper check converted at POS\n      Implied via in-person handoff\n      Moderate\n      Legacy retail checkout\n    \n  \n\n\n\n  Key Rule: Consumer-facing codes = Reg E protections, 60-day dispute window. Business-facing codes = contract-only protection, minimal dispute rights.\n\n\nAdvanced SEC Codes for Business\n\nBig corporations live in enhanced codes that support remittance detail:\n\n\n  \n    \n      SEC Code\n      Purpose\n      When to Use\n    \n  \n  \n    \n      CCD+\n      Business payments with addenda\n      Vendor invoices needing line-item notes\n    \n    \n      PPD+\n      Consumer payments with addenda\n      Government benefits with detailed breakdowns\n    \n    \n      CTX\n      Corporate Trade Exchange, full EDI integration\n      Enterprise treasury, supply chain payments\n    \n  \n\n\nThe Cost of Addenda (CCD+ vs. CTX)\n\nIn one of the ACH audits, the Nacha auditor flagged the use of CCD+ instead of CTX for vendor payments. Why aren’t we using CTX, I explained that we only needed one line of extra information and CCD+ was cost effective.\n\nBank fee math (example - fees vary by institution):\n\n  Base ACH: $0.05\n  Addenda record: $0.02\n  CTX premium: $0.08 + $500/month setup\n\n\nVolume: 25,000 payments/month\n\n\n  CCD+ cost: $1,750/month\n  CTX cost: $3,750/month\n  Annual savings: $24,000\n\n\n\n  Lesson: CTX is only worth it if you need structured EDI remittance data. For single-line invoices, CCD+ is the right tool. Compliance isn’t about gold-plating — it’s about defensible, efficient decisions.\n\n\nWhat Happens When You Screw It Up\n\nFintech story: Our misclassification issue wasn’t unique. We processed a small business bill pay as WEB. When “Johnson Construction LLC” sent a payment, the ACH operator flagged it: business name + consumer code = violation.\n\nThe ACH operator issued a formal warning to our sponsor bank about incorrect SEC code usage patterns. The bank immediately escalated to us with an ultimatum: “Fix SEC logic in 72 hours or risk processing restrictions.”\n\nTheir fix: auto-detect business entities and assign CCD. Example:\n\ndef determine_sec_code(account_holder_name, transaction_type, account_type = nil)\n  business_indicators = ['LLC','INC','CORP','LTD','CO','COMPANY','LP','LLP']\n  is_business = business_indicators.any? { |i| account_holder_name.upcase.include?(i) }\n  \n  # Note: This is a simplified approach. In practice, you may need:\n  # - Manual review for edge cases (sole proprietorships, DBAs, trusts)\n  # - Account type verification (business vs consumer account)\n  # - Customer self-identification during onboarding\n  \n  if is_business || account_type == 'business'\n    'CCD'\n  else\n    case transaction_type\n    when 'web_authorization' then 'WEB'\n    when 'recurring_payment' then 'PPD'\n    when 'phone_authorization' then 'TEL'\n    when 'check_conversion' then 'ARC'\n    else\n      raise \"Unsupported transaction type: #{transaction_type}\"\n    end\n  end\nend\n\n\n\n  Takeaway: Banks run automated pattern checks. Misuse isn’t hypothetical — it’s detected, flagged, and escalated fast.\n\n\n🧾 What You Must Prove — or Lose the Dispute\n\nConsumer transactions (PPD, WEB, TEL, ARC, POP):\n\n  Must follow Regulation E\n  Customers can dispute “unauthorized” debits up to 60 days\n  You need audit-proof authorization records\n  Burden of proof is on you, the merchant\n\n\nBusiness transactions (CCD, CCD+, CTX):\n\n  Governed by commercial agreements\n  Very limited dispute rights\n  Much lower return rates\n  Businesses can’t casually reverse like consumers\n\n\nRetention rules that matter:\n\n  Keep authorization evidence for 2 years minimum\n  Produce within 10 business days of a dispute request\n  Can’t produce evidence = you eat the full loss\n\n\nImplementation Scenarios\n\n\n  Online subscriptions → WEB with account validation before first debit.\n  Payroll → PPD credit with employee-signed authorization.\n  Vendor settlement → CCD with commercial agreement.\n  Call center bill pay → TEL with recorded authorization OR written confirmation to customer.\n\n\nExample: WEB Authorization Flow\n\nHere’s what proper WEB authorization looks like in code:\n\n# Example WEB authorization capture\nclass WebACHAuthorization\n  def capture_authorization(customer_params)\n    verify_customer_identity(customer_params)\n    present_nacha_disclosures\n    \n    authorization = build_authorization_record(customer_params)\n    validate_account_before_first_debit(authorization)\n    store_authorization_record(authorization)\n  end\n  \n  private\n  \n  def build_authorization_record(customer_params)\n    {\n      customer_id: customer_params[:id],\n      account_number: mask_account(customer_params[:account]),\n      routing_number: customer_params[:routing],\n      amount: customer_params[:amount],\n      consent_timestamp: Time.current,\n      ip_address: request.remote_ip,\n      user_agent: request.user_agent,\n      sec_code: 'WEB',\n      nacha_disclosure_shown: true,\n      customer_consent: customer_params[:i_agree] == 'true'\n    }\n  end\n  \n  def validate_account_before_first_debit(auth)\n    # Microdeposits, Plaid, or similar verification required\n    AccountValidationService.verify(\n      routing: auth[:routing_number],\n      account: auth[:account_number]\n    )\n  end\n  \n  def store_authorization_record(authorization)\n    # Store for 2+ years per Nacha requirements with encryption\n    AuthorizationRecord.create!(authorization)\n  end\nend\n\n\nSEC Code Compliance Checklist\n\n✅ Pre-Implementation\n\n  Map all payment flows to appropriate SEC codes\n  Implement business entity detection logic\n  Design authorization capture workflows\n  Set up 2-year retention system for authorization records\n  Include encryption and access logging for stored authorization records\n\n\n✅ Operational Requirements\n\n  Automate SEC code assignment (eliminate manual selection)\n  Validate accounts before first WEB debit\n  Maintain call recordings for TEL transactions OR send written confirmations to customers\n  Store IP addresses and timestamps for online authorizations\n\n\n✅ Ongoing Compliance\n\n  Monitor transaction patterns for SEC code violations\n  Monitor SEC code mix monthly and flag unexpected ratios (e.g., high WEB volume with few account validations)\n  Audit authorization records quarterly\n  Respond to disputes within 10 business days\n  Review bank compliance feedback regularly\n\n\n\n  Critical Principle: SEC codes document your authorization process. Accurate implementation provides regulatory protection; incorrect usage creates liability under consumer protection regulations.\n\n\n📋 Quick Reference: SEC Code Decision Tree\n\nStep 1: Who’s the account holder?\n\n  Business name (LLC, INC, CORP, etc.) → Use CCD family\n  Individual person → Continue to Step 2\n\n\nStep 2: How was authorization captured?\n\n  Online form/website → WEB (with account validation)\n  Phone call → TEL (with recorded authorization OR written confirmation)\n  Signed agreement → PPD\n  Mailed/dropped-off check → ARC\n  In-person check at register → POP\n\n\nStep 3: Need remittance data?\n\n  Simple payments → Standard codes (PPD, CCD, WEB, TEL)\n  Invoice details needed → Enhanced codes (PPD+, CCD+)\n  Full EDI integration → CTX\n\n\nReferences\n\n\n  \n    NACHA (National Automated Clearing House Association). “ACH Rules &amp; Guidelines.” NACHA.org, 2024. https://www.nacha.org/rules\n  \n  \n    Federal Reserve. “Regulation E - Electronic Fund Transfers.” FederalReserve.gov, 2024. https://www.federalreserve.gov/regulations/\n  \n  \n    NACHA Operating Rules. “Standard Entry Class Codes.” NACHA Operating Rules &amp; Guidelines, 2024.\n  \n\n\n\n\nEnjoyed this deep dive? Check out the main How U.S. Payments Really Work series for more payment system breakdowns.\n"
    },
  
    {
      "title": "NACHA File Demystified: Cracking the 94-Character Code",
      "url": "/fintech/ach/2025/08/15/nacha-file-demystified.html",
      "date": "August 15, 2025",
      "categories": ["fintech","ach"],
      "tags": ["nacha","ach","file-format","fintech-operations","payments-infrastructure","banking"],
      "excerpt": "Every ACH transaction starts as a carefully crafted 94-character line in a NACHA file. Let's decode the cryptic structure that moves $72 trillion annually through the U.S. banking system.",
      "content": "NACHA File Demystified: Cracking the 94-Character Code\n\nPublished on: August 15, 2025\n\n\n\nPicture this: You’re building a payroll system, and your first ACH file submission gets rejected with a cryptic “Invalid field length at position 47.” Meanwhile, $72 trillion moves through these exact same files every year without a hitch.\n\nWelcome to NACHA files—where every character matters, spaces are sacred, and one misplaced digit can derail your entire batch.\n\nWhy This Matters Now\n\nIf you’re building anything that touches money in the U.S., you’ll eventually encounter NACHA files. They’re the beating heart of ACH transactions—from your Venmo transfer to that $50K B2B payment. But the 50-year-old fixed-width format feels like archaeology until you need to debug why your file got rejected at 2 AM.\n\nThe Anatomy of Financial DNA\n\nEvery NACHA file is exactly what it sounds like: a text file with rigidly structured lines, each exactly 94 characters. No more, no less. Think of it as financial DNA—every position has meaning, every character serves a purpose.\n\nBut here’s the perfect analogy: NACHA files are like mail delivery:\n\n  File Header/Footer (lines 1 &amp; 9) = The envelope telling the postal system who’s sending to whom\n  Batch Header/Footer (lines 5 &amp; 8) = Letters inside the envelope, each with their own addressing\n  Entry Details (line 6) = The actual message content (transactions)\n  Addenda Records (line 7) = Extra pages, return receipts, or “address correction” notices\n\n\nLet’s walk through the first 9 lines of a real NACHA file:\n\nLine 1: File Header Record (Type ‘1’) - The Envelope\n101 121042882 1234567891234560815180600A094101FIRST NATIONAL BANK    ACME CORP              \n\n\nThis is the envelope that tells the postal system (banking network): “Here’s who’s sending money to whom, when, and how to route this file through the ACH system.”\n\nField breakdown:\n\n  Positions 1-1: Record Type Code (1)\n  Positions 2-3: Priority Code (01 - always)\n  Positions 4-13: Immediate Destination (121042882 - receiving bank’s routing number)\n  Positions 14-23: Immediate Origin (1234567891 - your ODFI’s routing number + company ID)\n  Positions 24-29: File Creation Date (250815 - YYMMDD)\n  Positions 30-33: File Creation Time (1800 - HHMM)\n  Positions 34-34: File ID Modifier (A - daily sequence)\n  Positions 35-37: Record Size (094 - always 94 characters)\n  Positions 38-39: Blocking Factor (10 - always)\n  Positions 40-40: Format Code (1 - always)\n  Positions 41-63: Immediate Destination Name (FIRST NATIONAL BANK)\n  Positions 64-86: Immediate Origin Name (ACME CORP)\n  Positions 87-94: Reference Code (optional notes)\n\n\nLine 2: Company/Batch Header Record (Type ‘5’) - The Letter Header\n5220ACME CORP                   1234567891PPDPAYROLL   250815   1123456780000001\n\n\nThink of this as the letter header inside the envelope. Each batch is like a separate letter with its own purpose - this one says “ACME Corp is sending payroll transactions.”\n\nKey fields:\n\n  Positions 1-1: Record Type (5)\n  Positions 2-4: Service Class Code (220 = mixed debits/credits)\n  Positions 5-20: Company Name (ACME CORP)\n  Positions 21-40: Company Discretionary Data (internal reference)\n  Positions 41-50: Company ID (1234567891)\n  Positions 51-53: Standard Entry Class (PPD = Prearranged Payment/Deposit)\n  Positions 54-63: Company Entry Description (PAYROLL)\n  Positions 64-69: Company Descriptive Date (250815)\n  Positions 70-75: Effective Entry Date (250815)\n  Positions 76-78: Settlement Date (Julian, blank = next banking day)\n  Positions 79-79: Originator Status Code (1)\n  Positions 80-87: Originating DFI ID (12345678)\n  Positions 88-94: Batch Number (0000001)\n\n\nLines 3-6: Entry Detail Records (Type ‘6’)\n627123456789987654321        0000050000JOHN DOE              0123456780000001\n627123456789876543210        0000075000JANE SMITH            0123456780000002  \n622123456789555666777        0000100000MIKE JOHNSON          0123456780000003\n627123456789444555666        0000025000SARAH WILSON          0123456780000004\n\n\nHere’s where the money moves. Each line represents one transaction.\n\nLine 7: Addenda Record (Type ‘7’) - The Extra Pages\n799RETURN REASON: R01 INSUFFICIENT FUNDS                                    00010000001\n\n\nThese are the “extra pages” attached to transactions. Addenda records serve multiple critical purposes:\n\nOutgoing (your additional info):\n\n  CCD/CTX transactions: Can include remittance data, invoice details\n  Corporate payments: Purchase order numbers, contract references\n  B2B payments: Detailed payment allocation information\n  International: Additional regulatory or routing information\n\n\nIncoming (bank responses):\n\n  Returns: When transactions fail (insufficient funds, account closed)\n  Notifications of Change (NOC): When account info needs updating\n  Acknowledgments: Confirmation receipts from receiving banks\n\n\nAddenda anatomy:\n\n  Position 1: Record Type (7)\n  Position 2: Addenda Type Code (05 = remittance data, 99 = returns/NOCs)\n  Positions 3-82: Payment Related Information (remittance details, return reason, etc.)\n  Positions 83-86: Addenda Sequence Number (0001)\n  Positions 87-94: Entry Detail Sequence Number (0000001)\n\n\nEntry Detail anatomy:\n\n  Position 1: Record Type (6)\n  Position 2: Transaction Code (22 = credit to checking, 27 = debit from checking)\n  Positions 3-10: Receiving DFI ID (first 8 digits of recipient’s bank routing)\n  Positions 11-27: DFI Account Number (recipient’s account, left-justified)\n  Positions 28-37: Amount (0000050000 = $500.00, no decimal point)\n  Positions 38-59: Individual Name (JOHN DOE)\n  Positions 60-61: Discretionary Data (usually blank)\n  Positions 62-79: Individual ID Number (employee ID, SSN, etc.)\n  Positions 80-94: Trace Number (unique transaction identifier)\n\n\nLine 8: Company/Batch Control Record (Type ‘8’) - The Letter Footer\n822000000500492592580000000000000000025000012345678000001\n\n\nThis closes the letter (batch) with a mathematical proof that everything adds up correctly. Like signing and dating a letter.\n\nControl totals:\n\n  Position 1: Record Type (8)\n  Positions 2-4: Service Class Code (220)\n  Positions 5-10: Entry/Addenda Count (000005 = 4 transactions + 1 addenda)\n  Positions 11-20: Entry Hash (0492592580 - sum of first 8 digits of all routing numbers, rightmost 10 digits)\n  Positions 21-32: Total Debit Amount (000000000000)\n  Positions 33-44: Total Credit Amount (000000250000 = $2,500.00)\n  Positions 45-54: Company ID (1234567891)\n  Positions 80-87: Originating DFI ID (12345678)\n  Positions 88-94: Batch Number (0000001)\n\n\nLine 9: File Control Record (Type ‘9’) - Sealing the Envelope\n9000001000001000000050492592580000000000000000025000                       \n\n\nThis seals the envelope with file-level totals that must match the sum of all letters (batches) inside. The postal system uses this to verify nothing was lost in transit.\n\nFile totals:\n\n  Position 1: Record Type (9)\n  Positions 2-7: Batch Count (000001)\n  Positions 8-13: Block Count (000001)\n  Positions 14-21: Entry/Addenda Count (00000005)\n  Positions 22-31: Entry Hash (0492592580 - sum of first 8 digits of all routing numbers, rightmost 10 digits)\n  Positions 32-43: Total File Debit Amount (000000000000)\n  Positions 44-55: Total File Credit Amount (000000250000)\n\n\nThe Devil’s in the Details\n\nWhy Fixed-Width Still Rules\nIn an era of JSON APIs and GraphQL, NACHA’s fixed-width format feels archaic. But there’s method to the madness:\n\n\n  Parsing Performance: Banks process millions of transactions daily. Fixed-width parsing is blazingly fast.\n  Error Detection: Misaligned data is immediately obvious.\n  Legacy Integration: Core banking systems from the 1970s still run production workloads.\n  Regulatory Compliance: The format is legally mandated and audited.\n\n\nCommon Gotchas That Will Bite You\n\nPadding Hell:\n# Wrong - this will get rejected\naccount_number = \"12345\"\n\n# Right - left-justified, space-padded to 17 characters  \naccount_number = \"12345            \"\n\n\nNumerical Nightmares:\n# Wrong - NACHA doesn't understand decimals\namount = \"500.00\"\n\n# Right - implied decimal, zero-padded to 10 digits\namount = \"0000050000\"  # represents $500.00\n\n\nDate Format Disasters:\n# Wrong - ISO 8601 is too modern\ndate = \"2025-08-15\"\n\n# Right - YYMMDD format\ndate = \"250815\"\n\n\nBuilding a NACHA File Generator\n\nHere’s a Ruby class that handles the core structure:\n\nclass NachaFileBuilder\n  def initialize(company_name:, company_id:, destination_bank:)\n    @company_name = company_name\n    @company_id = company_id\n    @destination_bank = destination_bank\n    @entries = []\n    @batch_number = 1\n  end\n  \n  def add_credit(account_number:, routing_number:, amount:, name:, individual_id:)\n    @entries &lt;&lt; {\n      transaction_code: '22',  # Credit to checking account\n      routing_number: routing_number,\n      account_number: account_number.ljust(17),\n      amount: sprintf('%010d', (amount * 100).to_i),\n      name: name.ljust(22)[0,22],\n      individual_id: individual_id\n    }\n  end\n  \n  def generate_file\n    lines = []\n    lines &lt;&lt; file_header_record\n    lines &lt;&lt; batch_header_record\n    \n    @entries.each_with_index do |entry, index|\n      lines &lt;&lt; entry_detail_record(entry, index + 1)\n    end\n    \n    lines &lt;&lt; batch_control_record\n    lines &lt;&lt; file_control_record\n    \n    # Pad to block boundary (multiple of 10 lines)\n    while lines.length % 10 != 0\n      lines &lt;&lt; \"9\" * 94\n    end\n    \n    lines.join(\"\\n\")\n  end\n  \n  private\n  \n  def file_header_record\n    [\n      '1',                                    # Record Type\n      '01',                                   # Priority Code\n      @destination_bank.ljust(10),            # Immediate Destination\n      @company_id.rjust(10, '0'),            # Immediate Origin\n      Time.now.strftime('%y%m%d'),           # File Creation Date\n      Time.now.strftime('%H%M'),             # File Creation Time\n      'A',                                   # File ID Modifier\n      '094',                                 # Record Size\n      '10',                                  # Blocking Factor\n      '1',                                   # Format Code\n      'BANK NAME'.ljust(23),                 # Destination Name\n      @company_name.ljust(23),               # Origin Name\n      ' ' * 8                                # Reference Code\n    ].join('').ljust(94)\n  end\n  \n  def entry_detail_record(entry, trace_number)\n    [\n      '6',                                   # Record Type\n      entry[:transaction_code],              # Transaction Code\n      entry[:routing_number][0,8],           # Receiving DFI ID\n      entry[:account_number],                # Account Number\n      entry[:amount],                        # Amount\n      entry[:name],                          # Individual Name\n      '  ',                                  # Discretionary Data\n      entry[:individual_id].ljust(15),       # Individual ID\n      sprintf('%07d', trace_number)          # Trace Number\n    ].join('').ljust(94)\n  end\n  \n  # ... other record methods\nend\n\n\nComplete Working Example\n\nHere’s a minimal but valid NACHA file you can copy-paste and test. It contains 1 credit + 1 debit transaction, properly padded to a 10-line block:\n\n101 121042882 123456789 2508151800A094101FIRST NATIONAL BANK    ACME CORP              \n5220ACME CORP                   1234567891PPDPAYROLL   250815   1123456780000001\n6221234567801234567890123456    0000100000JOHN DOE              0000000000000001\n6271234567809876543210987654    0000050000JANE SMITH            0000000000000002\n8220000002002469135600000000500000000001000001234567890000001\n900000100000200000002024691356000000005000000000100000\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n\n\nWhat’s Happening Here:\n\nLine 1 (File Header): The envelope - tells the system who’s sending to whom\n\n  121042882 → Destination bank routing number\n  123456789 → Origin ODFI routing number\n  2508151800 → File created August 15, 2025 at 18:00\n\n\nLine 2 (Batch Header): Letter header - describes this batch of transactions\n\n  5220 → Mixed debits and credits service class\n  PPD → Prearranged Payment &amp; Deposit entry class\n  250815 → Effective date (August 15, 2025)\n\n\nLine 3 (Credit Entry): $100.00 credit to John Doe’s checking account\n\n  22 → Credit to checking account\n  0000100000 → $100.00 (implied decimal)\n\n\nLine 4 (Debit Entry): $50.00 debit from Jane Smith’s checking account\n\n  27 → Debit from checking account\n  0000050000 → $50.00 (implied decimal)\n\n\nLine 5 (Batch Control): Mathematical proof for this batch\n\n  2 entries total, $100 credit, $50 debit\n  Entry hash: 02469135 (sum of receiving DFI routing numbers)\n\n\nLine 6 (File Control): File-level totals (must match batch totals)\n\n  1 batch, 2 entries, same monetary totals\n\n\nLines 7-10: Padding with all 9s to reach 10-line block boundary\n\nTesting This File\n\nCopy the above example into a text file (save as sample.ach) and:\n\n  Use NACHA validation tools to verify the format\n  Test with your Ruby generator to compare output\n  Examine with a hex editor to see the exact 94-character line structure\n  Study the math: Notice how entry hash 024691356 = 12345678 + 12345678 (first 8 digits of both routing numbers)\n\n\nPrecision Notes for Builders\n\nA few critical clarifications that trip up even experienced developers:\n\n\n  Transaction Codes: 22 = credit to checking account, 27 = debit from checking account. Remember: it’s from the recipient’s perspective.\n  Immediate Origin: Usually your ODFI’s routing number (sometimes combined with company ID), not your company’s EIN or Fed ID.\n  Entry Hash: Sum of the first 8 digits of all receiving bank routing numbers, then truncated to the rightmost 10 digits.\n  Addenda Types: 05 for remittance data (CCD/CTX), 99 for returns and Notifications of Change (NOCs).\n  Block Count: Number of physical blocks (10 records per block). In our example: 10 lines = 1 block. The 9 padding records count toward this total.\n  Discretionary Data: Positions 60-61 in Entry Detail records. Most leave blank, but some originators use for internal tracking codes.\n  Trace Number: Should be 8-digit ODFI routing + 7-digit sequence (15 characters total). Our simplified examples show just the sequence portion.\n\n\nKey Takeaways\n\n\n  Every character counts: NACHA files are unforgiving. One misplaced space will reject your entire batch.\n  Think in fixed-width: Padding, alignment, and field lengths are non-negotiable.\n  Test religiously: Use the ACH operator’s file validation tools before going live.\n  Embrace the constraints: The rigid format enables high-speed, reliable processing.\n  Read the spec: NACHA’s Operating Rules are your bible—all 500+ pages of them.\n\n\nReferences\n\n\n  NACHA. “ACH Operating Rules &amp; Guidelines.” NACHA, 2024. nacha.org\n  Federal Reserve. “FedACH Services.” Federal Reserve Financial Services, 2024.\n\n\n\n\nEnjoyed this deep dive? Check out the main How U.S. Payments Really Work series for more payment system mysteries demystified.\n"
    },
  
    {
      "title": "Wire Transfers Explained: Fast, Final, and Expensive",
      "url": "/fintech/payments/2025/08/14/wire-transfers-explained.html",
      "date": "August 14, 2025",
      "categories": ["fintech","payments"],
      "tags": ["wire-transfers","fedwire","chips","swift","payments","banking"],
      "excerpt": "Wire transfers are the express lane of money movement - fast, final, and irreversible. Unlike ACH's batch processing, wires move money in real-time through networks like Fedwire and CHIPS.",
      "content": "\n\n  Part 2 of the \"How U.S. Payments Really Work\" Series\n  ← Previous: How Money Moves | \n  View complete series roadmap | \n  Next: ACH: The Good, The Bad, and The Ugly →\n\n\nWire Transfers Explained: Fast, Final, and Expensive\n\nPublished on: August 14, 2025\n\n\n\nA wire transfer is like telling your bank: “Move this money to another bank account — right now. No batching. No waiting.”\n\nWire transfers are fast, final, and irreversible. Once the money moves, it’s gone — no take-backs, no “oops,” no reversal unless fraud is involved.\n\nWhile ACH processes payments in batches over 1-3 days, wire transfers settle immediately through real-time gross settlement systems. This speed comes at a premium: expect to pay $15-$50 per wire, sometimes more for international transfers.\n\nWhat Is a Wire Transfer?\n\nWire transfers are electronic fund transfers that move money directly from one bank account to another in real-time. Unlike ACH’s batch processing system, wires are processed individually and settle immediately.\n\nKey characteristics:\n\n  Real-time processing - funds move within minutes\n  Irreversible - no ability to cancel once sent\n  High value - commonly used for large transactions\n  Expensive - significant fees compared to ACH\n  Secure - heavily regulated and monitored\n\n\nWho Uses Wire Transfers?\n\nWire transfers serve specific use cases where speed and finality are crucial:\n\nBusiness Use Cases\n\n  Real estate transactions - closing on property purchases\n  Large vendor payments - time-sensitive business deals\n  International trade - cross-border commercial payments\n  Securities trading - same-day settlement requirements\n\n\nPersonal Use Cases\n\n  Home purchases - down payments and closing costs\n  Emergency transfers - urgent family support\n  International remittances - sending money abroad\n  Large purchases - luxury items, vehicles\n\n\nWire Transfer Networks\n\nWire transfers operate on different networks depending on the type and destination:\n\n\n  \n    \n      Type\n      Network\n      Operator\n      Use Case\n    \n  \n  \n    \n      Domestic (U.S.)\n      Fedwire\n      Federal Reserve\n      Real-time gross settlement\n    \n    \n      Domestic (Private)\n      CHIPS\n      The Clearing House\n      Large-value net settlement\n    \n    \n      International\n      SWIFT\n      SWIFT (Belgium)\n      Cross-border messaging\n    \n  \n\n\nNetwork Definitions\n\nFedwire: Real-time gross settlement system operated by the Federal Reserve. Processes individual transactions immediately with full reserve backing.\n\nCHIPS: Clearing House Interbank Payments System. Net settlement system for high-value domestic and international dollar payments.\n\nSWIFT: Society for Worldwide Interbank Financial Telecommunication. Messaging network that facilitates international wire instructions between banks.\n\nDomestic Wire Transfer Flow\n\nWhen you send a domestic wire transfer, here’s exactly what happens:\n\nThe Process\n\n\n  You provide wire instructions to your bank\n  Your Bank validates the transaction and debits your account\n  Wire Network processes the payment through Fedwire or CHIPS\n  Receiving Bank credits the recipient’s account\n  Recipient receives funds same-day (often within minutes)\n\n\n\nflowchart LR\n    A[\"YouWire Instructions\"] \n    B[\"Your BankSender\"]\n    C[\"Wire NetworkReal-time Processing\"]\n    D[\"Receiving BankRecipient Bank\"]\n    E[\"RecipientFunds Received\"]\n    \n    F[\"FedwireFederal Reserve\"]\n    G[\"CHIPSThe Clearing House\"]\n    \n    A --&gt;|\"Wire Request\"| B\n    B --&gt;|\"Debit Account\"| B\n    B --&gt;|\"Send via\"| F\n    B --&gt;|\"Send via\"| G\n    F --&gt;|\"Real-time Settlement\"| D\n    G --&gt;|\"Net Settlement\"| D\n    D --&gt;|\"Credit Account\"| E\n    \n    style A fill:#e3f2fd\n    style B fill:#f3e5f5\n    style C fill:#fff3e0\n    style D fill:#f3e5f5\n    style E fill:#e8f5e8\n    style F fill:#ffebee\n    style G fill:#ffebee\n\n\nDomestic Wire Transfer Flow: Real-time money movement through Fedwire or CHIPS\n\nSample Wire Transfer Code\n\nWhile most wire integrations are bank API-specific, here’s how you might model and submit a wire transfer request:\n\nrequire 'net/http'\nrequire 'json'\n\nclass WireTransfer\n  FEDWIRE_ROUTING_PREFIX = %w[01 02 03 04 05 06 07 08 09 10 11 12].freeze\n  \n  def initialize(params)\n    @sender_name = params[:sender_name]\n    @sender_account = params[:sender_account]\n    @sender_routing = params[:sender_routing_number]\n    @amount_cents = params[:amount_cents]\n    @currency = params[:currency] || 'USD'\n    @recipient_name = params[:recipient_name]\n    @recipient_account = params[:recipient_account]\n    @recipient_routing = params[:recipient_routing_number]\n    @purpose = params[:purpose]\n  end\n  \n  def validate!\n    raise \"Invalid amount\" if @amount_cents &lt;= 0\n    raise \"Invalid sender routing\" unless valid_routing?(@sender_routing)\n    raise \"Invalid recipient routing\" unless valid_routing?(@recipient_routing)\n    raise \"Purpose required for wires\" if @purpose.nil? || @purpose.empty?\n    true\n  end\n  \n  def to_wire_format\n    {\n      message_type: \"MT103\", # SWIFT message type for wire\n      sender: {\n        name: @sender_name,\n        account: @sender_account,\n        routing: @sender_routing\n      },\n      recipient: {\n        name: @recipient_name,\n        account: @recipient_account,\n        routing: @recipient_routing\n      },\n      amount: {\n        value: @amount_cents,\n        currency: @currency\n      },\n      purpose: @purpose,\n      settlement_method: fedwire_eligible? ? \"FEDWIRE\" : \"CHIPS\"\n    }\n  end\n  \n  def submit_to_bank(api_endpoint, api_key)\n    validate!\n    \n    uri = URI(api_endpoint)\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n    \n    request = Net::HTTP::Post.new(uri.path, {\n      'Content-Type' =&gt; 'application/json',\n      'Authorization' =&gt; \"Bearer #{api_key}\"\n    })\n    \n    request.body = to_wire_format.to_json\n    \n    response = http.request(request)\n    \n    case response.code.to_i\n    when 200..299\n      JSON.parse(response.body)\n    else\n      raise \"Wire submission failed: #{response.code} - #{response.body}\"\n    end\n  end\n  \n  private\n  \n  def valid_routing?(routing)\n    routing.length == 9 &amp;&amp; routing.match?(/\\A\\d{9}\\z/)\n  end\n  \n  def fedwire_eligible?\n    # Simplified logic - Fedwire handles most domestic wires\n    @currency == 'USD' &amp;&amp; domestic_routing?(@recipient_routing)\n  end\n  \n  def domestic_routing?(routing)\n    FEDWIRE_ROUTING_PREFIX.include?(routing[0..1])\n  end\nend\n\n# Usage example\nwire = WireTransfer.new(\n  sender_name: \"Suma Manjunath\",\n  sender_account: \"123456789\",\n  sender_routing_number: \"021000021\", # JPMorgan Chase\n  amount_cents: 25_000_00, # $25,000\n  recipient_name: \"Tech Supplier Inc.\",\n  recipient_account: \"987654321\",\n  recipient_routing_number: \"031000053\", # Wells Fargo\n  purpose: \"Hardware payment Q3\"\n)\n\n# Submit to bank API (mock endpoint)\nbegin\n  result = wire.submit_to_bank(\n    \"https://api.yourbank.com/v1/wire_transfers\",\n    \"your_api_key_here\"\n  )\n  \n  puts \"Wire initiated successfully!\"\n  puts \"Reference: #{result['wire_reference']}\"\n  puts \"Status: #{result['status']}\"\nrescue =&gt; e\n  puts \"Wire failed: #{e.message}\"\nend\n\n\nInternational Wire Transfers\n\nInternational wires add complexity through the SWIFT network:\n\nAdditional Requirements\n\n  SWIFT/BIC codes instead of routing numbers\n  Correspondent banking relationships\n  Compliance screening (OFAC, sanctions)\n  Currency conversion if needed\n  Higher fees ($25-$75+ per transfer)\n\n\nInternational Wire Flow\n\n\nflowchart LR\n    A[\"YouInternational Wire\"] \n    B[\"Your BankOriginator\"]\n    C[\"SWIFT NetworkMessaging\"]\n    D[\"Correspondent BankIntermediary\"]\n    E[\"Beneficiary BankDestination\"]\n    F[\"RecipientForeign Account\"]\n    \n    A --&gt;|\"Wire Instructions\"| B\n    B --&gt;|\"MT103 Message\"| C\n    C --&gt;|\"Route Message\"| D\n    D --&gt;|\"Forward Funds\"| E\n    E --&gt;|\"Credit Account\"| F\n    \n    style A fill:#e3f2fd\n    style B fill:#f3e5f5\n    style C fill:#fff3e0\n    style D fill:#ffeaa7\n    style E fill:#f3e5f5\n    style F fill:#e8f5e8\n\n\nInternational Wire Flow: Multi-hop routing through SWIFT and correspondent banks\n\nWire vs ACH Comparison\n\n\n  \n    \n      Aspect\n      Wire Transfers\n      ACH\n    \n  \n  \n    \n      Speed\n      Real-time (minutes)\n      1-3 days\n    \n    \n      Cost\n      $15-$75 per transfer\n      $0.25-$1.50 per transfer\n    \n    \n      Reversibility\n      Irreversible\n      Can be returned\n    \n    \n      Amount Limits\n      High ($1M+)\n      Lower ($1M for same-day)\n    \n    \n      Use Cases\n      Large, urgent payments\n      Recurring, batch payments\n    \n    \n      Network\n      Fedwire, CHIPS, SWIFT\n      FedACH, EPN\n    \n    \n      Settlement\n      Real-time gross\n      Batch net settlement\n    \n  \n\n\nTesting Wire Transfers\n\nWire transfer testing is challenging due to regulatory requirements and irreversible nature. Here are the best approaches:\n\nSandbox Environments\n\n\n  \n    \n      Platform\n      Supports Wires\n      Sandbox Quality\n      Notes\n    \n  \n  \n    \n      Modern Treasury\n      Yes\n      Excellent\n      Full wire simulation with approval workflows\n    \n    \n      SWIFT Developer Portal\n      Message-only\n      Good\n      MT103 message testing, no funds\n    \n  \n\n\nModern Treasury Example\n\n# Modern Treasury sandbox wire test\nrequire 'net/http'\nrequire 'json'\n\ndef test_wire_transfer\n  uri = URI(\"https://sandbox.moderntreasury.com/api/payment_orders\")\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  \n  request = Net::HTTP::Post.new(uri.path, {\n    'Content-Type' =&gt; 'application/json',\n    'Authorization' =&gt; 'Bearer test_api_key'\n  })\n  \n  wire_payload = {\n    amount: 100_000, # $1,000 in cents\n    currency: \"USD\",\n    direction: \"credit\",\n    originating_account_id: \"test-origin-account\",\n    receiving_account_id: \"test-recipient-account\",\n    payment_type: \"wire\",\n    purpose: \"Testing wire transfer flow\"\n  }\n  \n  request.body = wire_payload.to_json\n  response = http.request(request)\n  \n  if response.code.to_i.between?(200, 299)\n    result = JSON.parse(response.body)\n    puts \"Test wire created: #{result['id']}\"\n    puts \"Status: #{result['status']}\"\n  else\n    puts \"Test failed: #{response.body}\"\n  end\nend\n\ntest_wire_transfer\n\n\nSecurity and Compliance\n\nWire transfers require strict security measures:\n\nValidation Requirements\n\n  Dual authorization for large amounts\n  OFAC screening for sanctions compliance\n  Know Your Customer (KYC) verification\n  Anti-Money Laundering (AML) monitoring\n  Purpose codes for regulatory reporting\n\n\nBest Practices\n\n  Triple-check recipient details (irreversible!)\n  Use secure channels for wire instructions\n  Implement approval workflows for business wires\n  Monitor for fraud patterns in wire activity\n  Maintain audit trails for compliance\n\n\nWhen to Use Wire Transfers\n\nChoose Wires When:\n\n  Speed is critical (same-day settlement needed)\n  Large amounts require immediate finality\n  International transfers to countries without ACH\n  Real estate transactions with closing deadlines\n  Securities trading requiring immediate settlement\n\n\nChoose ACH When:\n\n  Cost matters more than speed\n  Recurring payments like payroll or subscriptions\n  Domestic transfers under $1M\n  Batch processing is acceptable\n  Reversibility might be needed\n\n\nReality Check: Things You Should Actually Care About\n\nThe technical specs are great, but here’s what matters when you’re actually sending a wire transfer:\n\nRealistic Timing Expectations\n\nDomestic Wires:\n\n  Same business day if sent before 2 PM local time\n  Next business day if sent after cutoff\n  No weekend processing - Friday 3 PM wire arrives Monday\n\n\nInternational Wires:\n\n  1-5 business days depending on destination\n  Correspondent bank delays can add 1-2 days\n  Time zone differences affect cutoff times\n  Local holidays in destination country cause delays\n\n\nThe Real Cost Breakdown\n\nWire transfer fees stack up quickly:\n\n\n  \n    \n      Fee Type\n      Domestic\n      International\n      Who Charges\n    \n  \n  \n    \n      Outgoing Fee\n      $15-$30\n      $25-$50\n      Your bank\n    \n    \n      Incoming Fee\n      $10-$15\n      $15-$25\n      Recipient’s bank\n    \n    \n      Intermediary Fee\n      N/A\n      $10-$25\n      Correspondent banks\n    \n    \n      Currency Conversion\n      N/A\n      2-4% markup\n      All banks in chain\n    \n    \n      SWIFT Fee\n      N/A\n      $5-$15\n      International routing\n    \n  \n\n\nReal Example: $10,000 wire to Europe\n\n  Your bank: $45 outgoing fee\n  Correspondent bank: $20 routing fee\n  Recipient bank: $25 incoming fee\n  Currency conversion: $300 (3% markup)\n  Total cost: $390 (3.9% of transfer amount)\n\n\nFraud and Scam Protection\n\nWire transfers are irreversible, making them prime targets for scams:\n\nCommon Wire Fraud Schemes:\n\n  Business Email Compromise - fake vendor payment requests\n  Real estate fraud - fake closing instructions\n  Romance scams - fake emergencies requiring urgent transfers\n  Tech support scams - fake “security” wire requests\n\n\nProtection Strategies:\n# Wire fraud prevention checklist\nwire_safety_checklist = {\n  verify_recipient: \"Call known phone number to confirm\",\n  double_check_details: \"Verify routing/account numbers independently\", \n  question_urgency: \"Be suspicious of 'wire now or else' pressure\",\n  use_secure_channels: \"Never send wire details via email\",\n  start_small: \"Test with smaller amount for new recipients\",\n  document_everything: \"Save all communications and confirmations\"\n}\n\n\nRegulatory Monitoring (OFAC and AML)\n\nYour wire transfers are automatically screened:\n\nWhat Gets Monitored:\n\n  Recipient names against sanctions lists\n  Destination countries for embargo compliance\n  Transfer amounts for suspicious activity reporting\n  Pattern analysis for money laundering detection\n\n\nWhat This Means for You:\n\n  Delays possible if names match watchlists\n  Additional documentation may be required\n  Compliance questions from your bank\n  Potential account restrictions for repeated issues\n\n\nHidden Gotchas\n\nExchange Rate Games:\n\n  Banks use “wholesale + markup” rates\n  Markups range from 2-6% above mid-market\n  No disclosure requirement for the markup amount\n\n\nCorrespondent Bank Roulette:\n\n  Your bank chooses the routing path\n  Each intermediary can charge fees\n  No way to predict total intermediary costs upfront\n\n\nCut-off Time Reality:\n\n  “Same day” usually means “by 2 PM local time”\n  Different banks have different cutoffs\n  International wires often have earlier deadlines\n\n\nWhen ACH Is Actually Smarter\n\nConsider ACH instead of wires when:\n\nCost Sensitivity:\n# Cost comparison for $5,000 domestic transfer\nach_cost = {\n  fee: 1.50,          # Typical ACH fee\n  time: \"1-3 days\",\n  total_cost: 1.50\n}\n\nwire_cost = {\n  outgoing_fee: 25,\n  incoming_fee: 15, \n  time: \"Same day\",\n  total_cost: 40\n}\n\n# ACH saves $38.50 if timing allows\n\n\nRisk Management:\n\n  ACH transactions can be returned if unauthorized\n  Lower fraud risk due to batch processing delays\n  Easier to catch and prevent mistakes\n\n\nRecurring Transfers:\n\n  Set up once, runs automatically\n  Volume discounts often available\n  Better audit trails for business use\n\n\nSmart Wire Transfer Strategy\n\nBefore You Wire:\n\n  Confirm total costs upfront with your bank\n  Verify recipient details through independent channels\n  Check timing against business requirements\n  Consider ACH for non-urgent transfers\n  Document business purpose for compliance\n\n\nDuring Transfer:\n\n  Save confirmation numbers and screenshots\n  Monitor for completion within expected timeframe\n  Have recipient confirm receipt and amount\n\n\nAfter Transfer:\n\n  Reconcile amounts including all fees\n  File documentation for tax/audit purposes\n  Review process for future improvements\n\n\nReferences\n\n\n  \n    Federal Reserve Financial Services. “Fedwire Funds Service.” FederalReserve.gov, 2024. https://www.frbservices.org/financial-services/wires\n  \n  \n    The Clearing House. “CHIPS Payment System.” TCH.com, 2024. https://www.theclearinghouse.org/payment-systems/chips\n  \n  \n    SWIFT. “Wire Transfer Message Types and Standards.” SWIFT.com, 2024. https://www.swift.com/our-solutions/messaging\n  \n  \n    Modern Treasury. “Wire Transfer API Documentation.” ModernTreasury.com, 2024. https://docs.moderntreasury.com/docs/wire-transfers\n  \n  \n    Federal Financial Institutions Examination Council. “Wire Transfer Compliance Guidelines.” FFIEC.gov, 2024. https://www.ffiec.gov/press/pr041299.htm\n  \n  \n    Office of Foreign Assets Control. “Sanctions Compliance for Wire Transfers.” Treasury.gov, 2024. https://ofac.treasury.gov/compliance\n  \n\n\n\n"
    },
  
    {
      "title": "How Money Moves In And Out Of Your Bank Account?",
      "url": "/fintech/payments/2025/08/13/money-flow-bank-account.html",
      "date": "August 13, 2025",
      "categories": ["fintech","payments"],
      "tags": ["ach","payments","banking","fintech-basics"],
      "excerpt": "Ever wonder how your paycheck shows up in your bank account on payday? Or how your gym magically pulls your membership fee every month? That's all thanks to ACH -...",
      "content": "\n\n  Part 1 of the \"How U.S. Payments Really Work\" Series\n  ← View complete series roadmap | \n  Next: Wire Transfers →\n\n\nHow Money Moves In and Out of Your Bank Account?\n\nPublished on: August 13, 2025\n\n\n\nEver wonder how your paycheck shows up in your bank account on payday? Or how your gym magically pulls your membership fee every month? That’s all thanks to a behind-the-scenes hero called ACH (Automated Clearing House).\n\nACH is the electronic network that quietly processes over 29 billion transactions per year in the U.S., totaling more than $72 trillion. It’s the digital backbone that moves money between bank accounts reliably and affordably.\n\nWhat Is ACH?\n\nAutomated Clearing House (ACH) is a batch processing network that banks use to transfer money electronically. Unlike wire transfers or card payments, ACH focuses on cost-efficiency over speed.\n\n\n  Concept: Think of it as a digital postal service for money\n\n\n\n  Banks collect payment instructions throughout the day\n  They bundle these into batches\n  The network processes and routes them to destination banks\n  Money settles typically within 1-3 business days\n  Sends notifications for any returns or exceptions\n\n\n\ngraph TD\n    A[\"Originator (Individual/Business/Government)\"]:::start --&gt; B(\"Obtains Authorization\"):::process\n    B --&gt; C(\"Submits ACH Transaction to ODFI\"):::process\n    C --&gt; D[\"ODFI (Originating Depository Financial Institution)\"]:::bank\n    D -- Collects &amp; Batches Transactions --&gt; E[\"ACH Operator (Federal Reserve / The Clearing House)\"]:::operator\n    E -- Sorts &amp; Processes Batches --&gt; F[\"RDFI (Receiving Depository Financial Institution)\"]:::bank\n    F -- Posts Transactions to Accounts --&gt; G[\"Receiver (Account Holder)\"]:::endClass\n    E -- Facilitates Settlement --&gt; D\n    F -- Returns/Notifications (if applicable) --&gt; E\n    E -- Returns/Notifications (if applicable) --&gt; D\n\n    classDef start fill:#e3f2fd,stroke:#007acc,stroke-width:2px;\n    classDef process fill:#fff3e0,stroke:#f57c00,stroke-width:2px;\n    classDef bank fill:#f3e5f5,stroke:#6a1b9a,stroke-width:2px;\n    classDef operator fill:#ffebee,stroke:#d32f2f,stroke-width:2px;\n    classDef endClass fill:#e8f5e8,stroke:#388e3c,stroke-width:2px;\n\n\nACH Flow: Interaction between banks and ACH Operator\n\nPaying Bills Using Your Bank Account\n\nWhen you pay your electric bill online using your bank account, you’re initiating an ACH Debit transaction. Here’s exactly what happens:\n\nThe Flow\n\n\n  You authorize the utility company to pull money from your account\n  Your Bank (ODFI) validates the transaction and sends it to the ACH network\n  ACH Network routes the payment through either FedACH or EPN\n  Utility’s Bank (RDFI) receives and processes the payment\n  Utility Company gets notified and credits your account\n\n\n\nflowchart LR\n    A[\"👤YouAuthorize Payment\"] \n    B[\"🏦Your BankODFI\"]\n    C[\"📊ACH NetworkBatch Processing\"]\n    D[\"🏛️Utility's BankRDFI\"]\n    E[\"💡Utility CompanyPayment Received\"]\n    \n    F[\"🦅Federal ReserveFedACH - 80%\"]\n    G[\"🏢The Clearing HouseEPN - 20%\"]\n    \n    A --&gt;|\"Debit Authorization\"| B\n    B --&gt;|\"Batch File\"| C\n    C --&gt;|\"Route via\"| F\n    C --&gt;|\"Route via\"| G\n    F --&gt;|\"Settlement\"| D\n    G --&gt;|\"Settlement\"| D\n    D --&gt;|\"Credit Account\"| E\n    \n    style A fill:#e3f2fd\n    style B fill:#f3e5f5\n    style C fill:#fff3e0\n    style D fill:#f3e5f5\n    style E fill:#e8f5e8\n    style F fill:#ffebee\n    style G fill:#ffebee\n\n\nACH Debit Flow: Your electric bill payment journey from authorization to completion\n\nSample ACH Debit Code\n\nHere’s what an ACH debit file looks like using the Ruby ACH gem:\n\nrequire 'ach'\n\n# Create ACH file for bill payment\nach_file = ACH::ACHFile.new\nach_file.immediate_dest = '091000019'        # Fed routing number\nach_file.immediate_origin = '123456789'      # Utility's bank routing\nach_file.immediate_dest_name = 'FEDERAL RESERVE BANK'\nach_file.immediate_origin_name = 'ELECTRIC COMPANY'\n\n# Create batch for customer debits\nbatch = ACH::Batch.new\nbatch.service_class_code = '225'             # Debits only\nbatch.company_name = 'ELECTRIC CO'\nbatch.company_identification = '1234567890'\nbatch.standard_entry_class_code = 'WEB'     # Internet-initiated\nbatch.company_entry_description = 'ELECTRIC BILL'\nbatch.effective_entry_date = Date.tomorrow.strftime('%y%m%d')\n\n# Individual customer payment\nentry = ACH::EntryDetail.new\nentry.transaction_code = ACH::CHECKING_DEBIT  # 27 = Checking Debit\nentry.routing_number = '011000015'            # Customer's bank\nentry.account_number = '9876543210'           # Customer's account\nentry.amount = 12500                          # $125.00 in cents\nentry.individual_id_number = 'ACCT12345'\nentry.individual_name = 'JOHN DOE'\n\nbatch.entries &lt;&lt; entry\nach_file.batches &lt;&lt; batch\n\n# Generate NACHA file\nFile.write('electric_bill_debits.ach', ach_file.to_s)\n\n\nHow Salary Comes Into Your Account\n\nWhen your employer pays you, they’re initiating an ACH Credit transaction. This pushes money from their account into yours.\n\nThe Flow\n\n\n  Your Employer instructs their bank to send your salary\n  Employer’s Bank (ODFI) creates ACH credit entries for all employees\n  ACH Network processes the payroll batch\n  Your Bank (RDFI) receives the credit instruction\n  You see your paycheck deposited in your account\n\n\n\nflowchart LR\n    A[\"👔Your EmployerInitiate Payroll\"] \n    B[\"🏦Employer's BankODFI\"]\n    C[\"📊ACH NetworkBatch Processing\"]\n    D[\"🏛️Your BankRDFI\"]\n    E[\"👤YouPaycheck Received!\"]\n    \n    F[\"🦅Federal ReserveFedACH - 80%\"]\n    G[\"🏢The Clearing HouseEPN - 20%\"]\n    \n    A --&gt;|\"Credit Instructions\"| B\n    B --&gt;|\"Payroll Batch\"| C\n    C --&gt;|\"Route via\"| F\n    C --&gt;|\"Route via\"| G\n    F --&gt;|\"Settlement\"| D\n    G --&gt;|\"Settlement\"| D\n    D --&gt;|\"Deposit Funds\"| E\n    \n    style A fill:#fff3e0\n    style B fill:#f3e5f5\n    style C fill:#e3f2fd\n    style D fill:#f3e5f5\n    style E fill:#e8f5e8\n    style F fill:#ffebee\n    style G fill:#ffebee\n\n\n\nACH Credit Flow: How your salary travels from employer to your bank account\n\nSample ACH Credit Code\n\nHere’s how a payroll ACH file looks:\n\nrequire 'ach'\n\n# Create ACH file for payroll\nach_file = ACH::ACHFile.new\nach_file.immediate_dest = '091000019'        # Fed routing number\nach_file.immediate_origin = '987654321'      # Company's bank routing\nach_file.immediate_dest_name = 'FEDERAL RESERVE BANK'\nach_file.immediate_origin_name = 'TECH STARTUP INC'\n\n# Create batch for employee credits\nbatch = ACH::Batch.new\nbatch.service_class_code = '220'             # Credits only\nbatch.company_name = 'TECH STARTUP'\nbatch.company_identification = '9876543210'\nbatch.standard_entry_class_code = 'PPD'     # Prearranged payments\nbatch.company_entry_description = 'PAYROLL'\nbatch.effective_entry_date = Date.tomorrow.strftime('%y%m%d')\n\n# Individual employee payment\nentry = ACH::EntryDetail.new\nentry.transaction_code = ACH::CHECKING_CREDIT # 22 = Checking Credit\nentry.routing_number = '011000015'            # Employee's bank\nentry.account_number = '1234567890'           # Employee's account\nentry.amount = 250000                         # $2,500.00 in cents\nentry.individual_id_number = 'EMP001'\nentry.individual_name = 'JANE SMITH'\n\nbatch.entries &lt;&lt; entry\nach_file.batches &lt;&lt; batch\n\n# Generate NACHA file\nFile.write('payroll_credits.ach', ach_file.to_s)\n\n\nKey Differences: Debit vs Credit\n\n\n  \n    \n      Aspect\n      ACH Debit\n      ACH Credit\n    \n  \n  \n    \n      Direction\n      Pull money from account\n      Push money to account\n    \n    \n      Initiator\n      Receiver (biller)\n      Sender (employer)\n    \n    \n      Common Uses\n      Bills, subscriptions, loan payments\n      Payroll, tax refunds, vendor payments\n    \n    \n      Transaction Code\n      27 (Checking Debit), 37 (Savings Debit)\n      22 (Checking Credit), 32 (Savings Credit)\n    \n    \n      Risk Profile\n      Higher (unauthorized debits)\n      Lower (erroneous credits can be returned)\n    \n  \n\n\nThe Two Players in the ACH System\n\nThe ACH network isn’t run by one entity. Two operators handle all ACH processing in the United States:\n\nFedACH (Federal Reserve)\n\n  Operator: Federal Reserve Banks\n  Market Share: ~80% of ACH volume\n  Settlement: Through Federal Reserve accounts\n  Character: Government-run, conservative, highly regulated\n  Strengths: Nationwide reach, ultimate safety, consistent processing\n\n\nEPN Electronic Payments Network (The Clearing House)\n\n  Operator: The Clearing House (owned by major banks)\n  Market Share: ~20% of ACH volume\n  Settlement: Private net settlement + Fedwire\n  Character: Private sector, innovative, business-focused\n  Strengths: Faster processing windows, enhanced services for large clients\n\n\nHow They Work Together\n\nBoth networks are fully interoperable:\n\n  Banks can connect to either FedACH, EPN, or both\n  Payments seamlessly route between networks\n  Both follow identical NACHA rules and formats\n  Settlement happens at the Federal Reserve level\n\n\n# Same ACH entry format works for both networks\nentry.routing_number = '021000021'  # Chase (uses both FedACH &amp; EPN)\n# vs\nentry.routing_number = '011401533'  # Vermont Federal CU (FedACH only)\n\n# The ACH gem handles routing automatically based on \n# your bank's network connectivity\n\n\nWhy ACH Matters\n\nACH processes over $72 trillion annually with 99.95% reliability. It’s the invisible infrastructure that powers:\n\n\n  93% of U.S. workers receiving direct deposit\n  $2.3 trillion in business-to-business payments\n  Government benefits reaching 98% of recipients electronically\n  Consumer bill payments saving $2.3 billion in processing costs\n\n\nThe network operates on efficiency over speed - enabling massive scale at minimal cost while maintaining bank-grade security.\n\nReferences\n\n\n  \n    NACHA (National Automated Clearing House Association). “ACH Volume Statistics.” NACHA.org, 2024. https://www.nacha.org/rules/ach-operations-bulletins-and-advisories\n  \n  \n    Federal Reserve Financial Services. “FedACH Services.” FederalReserve.gov, 2024. https://www.frbservices.org/financial-services/ach\n  \n  \n    The Clearing House. “Electronic Payments Network (EPN).” TCH.com, 2024. https://www.theclearinghouse.org/payment-systems/ach\n  \n  \n    NACHA Operating Rules &amp; Guidelines. “2024 NACHA Operating Rules.” NACHA.org, 2024. https://www.nacha.org/rules\n  \n  \n    Ruby ACH Gem Documentation. “ACH File Processing for Ruby.” GitHub, 2024. https://github.com/jm81/ach\n  \n  \n    Federal Reserve Economic Data. “ACH Transaction Volume and Value Statistics.” FRED.stlouisfed.org, 2024. https://fred.stlouisfed.org/series/ACHCREDIT\n  \n  \n    Bank for International Settlements. “Payment Systems in the United States.” BIS Quarterly Review, 2023. https://www.bis.org/cpmi/publ/d105.htm\n  \n\n\n\n"
    }
  
]
